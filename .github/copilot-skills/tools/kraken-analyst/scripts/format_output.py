#!/usr/bin/env python3
"""
format_output.py - Kraken Analyst Skill: Output Formatting Module

Generates human-readable analysis reports.
Reads JSON from stdin (from apply_rules.py), outputs formatted report.

Usage:
    python format_output.py < analysis.json
    python format_output.py --format markdown < analysis.json
    python fetch_data.py --pair BTC/USD | python apply_rules.py | python format_output.py

Outputs:
    Formatted report (markdown, json, or text)
"""

import json
import sys
import argparse
from typing import Dict
from datetime import datetime


class ReportFormatter:
    """Formats analysis results into human-readable reports"""
    
    SIGNAL_EMOJI = {
        "BUY": "⬆️ 📈",
        "SELL": "⬇️ 📉",
        "HOLD": "⏸️ ➡️"
    }
    
    def format_markdown(self, data: Dict, include_charts: bool = False) -> str:
        """Generate markdown formatted report"""
        pair = data.get('pair', 'UNKNOWN')
        signal = data.get('signal', 'HOLD')
        confidence = data.get('confidence', 0) * 100
        timestamp = data.get('timestamp', 0)
        current_price = data.get('current_price', 0)
        analysis = data.get('analysis', {})
        
        # Convert timestamp
        dt = datetime.utcfromtimestamp(timestamp)
        
        report = f"""# Kraken Analysis Report

## {pair} Analysis
- **Signal**: {signal} {self.SIGNAL_EMOJI.get(signal, '')}
- **Confidence**: {confidence:.1f}%
- **Current Price**: ${current_price:,.2f}
- **Timestamp**: {dt.strftime('%Y-%m-%d %H:%M:%S UTC')}

### Technical Indicators

| Indicator | Value | Interpretation |
|-----------|-------|----------------|
| **Momentum** | {analysis.get('momentum', 0):.2f}σ | {self._interpret_momentum(analysis.get('momentum', 0), analysis.get('momentum_threshold', 2.0))} |
| **Volatility** | {analysis.get('volatility', 0):.2f}% | {self._interpret_volatility(analysis.get('volatility', 0), analysis.get('volatility_threshold', 2.5))} |
| **RSI** | {analysis.get('rsi', 50):.1f} | {self._interpret_rsi(analysis.get('rsi', 50))} |
| **MA Trend** | {analysis.get('ma_signal', 'neutral').title()} | MA({analysis.get('ma_fast', 12)}) vs MA({analysis.get('ma_slow', 26)}) |
| **Price Change** | {analysis.get('price_change_pct', 0):+.2f}% | Over analysis period |
| **Volume Ratio** | {analysis.get('volume_ratio', 1.0):.2f}x | Current vs 10-period avg |

### Moving Averages
- **Fast MA (12)**: ${analysis.get('ma_fast', 0):,.2f}
- **Slow MA (26)**: ${analysis.get('ma_slow', 0):,.2f}

### Volume Analysis
- **Current Volume**: {analysis.get('recent_volume', 0):,.2f}
- **Average Volume**: {analysis.get('avg_volume', 0):,.2f}

### Signal Explanation

"""
        
        # Add signal explanation
        if signal == "BUY":
            report += f"""**Why BUY?**
- Momentum ({analysis.get('momentum', 0):.2f}σ) indicates strong upward price movement
- RSI ({analysis.get('rsi', 50):.1f}) shows {self._interpret_rsi(analysis.get('rsi', 50)).lower()}
- Moving average trend is {analysis.get('ma_signal', 'neutral')}
- Confidence level: {confidence:.1f}%

**Risk Considerations:**
- Volatility: {analysis.get('volatility', 0):.2f}% (threshold: {analysis.get('volatility_threshold', 2.5):.1f}%)
- Volume confirmation: {analysis.get('volume_ratio', 1.0):.2f}x average
"""
        elif signal == "SELL":
            report += f"""**Why SELL?**
- Momentum ({analysis.get('momentum', 0):.2f}σ) indicates strong downward price movement
- RSI ({analysis.get('rsi', 50):.1f}) shows {self._interpret_rsi(analysis.get('rsi', 50)).lower()}
- Moving average trend is {analysis.get('ma_signal', 'neutral')}
- Confidence level: {confidence:.1f}%

**Risk Considerations:**
- Volatility: {analysis.get('volatility', 0):.2f}% (threshold: {analysis.get('volatility_threshold', 2.5):.1f}%)
- Volume confirmation: {analysis.get('volume_ratio', 1.0):.2f}x average
"""
        else:  # HOLD
            report += f"""**Why HOLD?**
- Momentum ({analysis.get('momentum', 0):.2f}σ) is within neutral range
- No clear directional signal from indicators
- RSI ({analysis.get('rsi', 50):.1f}) in {self._interpret_rsi(analysis.get('rsi', 50)).lower()} zone
- Confidence level: {confidence:.1f}%

**Wait for:**
- Clearer momentum signal (|momentum| > {analysis.get('momentum_threshold', 2.0):.1f}σ)
- Trend confirmation from moving averages
- Higher volume confirmation
"""
        
        if include_charts:
            report += "\n### Price Chart (ASCII)\n```\n"
            report += self._generate_ascii_chart(current_price, analysis.get('price_change_pct', 0))
            report += "\n```\n"
        
        report += f"\n---\n*Generated by Kraken Analyst Skill at {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}*\n"
        
        return report
    
    def format_text(self, data: Dict) -> str:
        """Generate plain text formatted report"""
        pair = data.get('pair', 'UNKNOWN')
        signal = data.get('signal', 'HOLD')
        confidence = data.get('confidence', 0) * 100
        current_price = data.get('current_price', 0)
        analysis = data.get('analysis', {})
        
        lines = [
            f"{'='*60}",
            f"KRAKEN ANALYSIS REPORT: {pair}",
            f"{'='*60}",
            f"",
            f"SIGNAL: {signal} {self.SIGNAL_EMOJI.get(signal, '')}",
            f"CONFIDENCE: {confidence:.1f}%",
            f"CURRENT PRICE: ${current_price:,.2f}",
            f"",
            f"TECHNICAL INDICATORS:",
            f"  Momentum: {analysis.get('momentum', 0):+.2f}σ",
            f"  Volatility: {analysis.get('volatility', 0):.2f}%",
            f"  RSI: {analysis.get('rsi', 50):.1f}",
            f"  MA Trend: {analysis.get('ma_signal', 'neutral').upper()}",
            f"  Price Change: {analysis.get('price_change_pct', 0):+.2f}%",
            f"  Volume Ratio: {analysis.get('volume_ratio', 1.0):.2f}x",
            f"",
            f"{'='*60}",
        ]
        
        return "\n".join(lines)
    
    def format_json(self, data: Dict) -> str:
        """Generate JSON formatted report (passthrough with pretty print)"""
        return json.dumps(data, indent=2)
    
    def _interpret_momentum(self, momentum: float, threshold: float) -> str:
        """Interpret momentum value"""
        if momentum > threshold:
            return "Strong upward momentum 🚀"
        elif momentum < -threshold:
            return "Strong downward momentum 📉"
        elif momentum > threshold * 0.5:
            return "Moderate upward momentum ↗️"
        elif momentum < -threshold * 0.5:
            return "Moderate downward momentum ↘️"
        else:
            return "Neutral/consolidating ➡️"
    
    def _interpret_volatility(self, volatility: float, threshold: float) -> str:
        """Interpret volatility value"""
        if volatility > threshold * 2:
            return "Extreme volatility ⚠️"
        elif volatility > threshold:
            return "High volatility"
        elif volatility > threshold * 0.5:
            return "Normal volatility ✅"
        else:
            return "Low volatility (consolidation)"
    
    def _interpret_rsi(self, rsi: float) -> str:
        """Interpret RSI value"""
        if rsi >= 70:
            return "Overbought ⚠️"
        elif rsi >= 60:
            return "Strong"
        elif rsi >= 40:
            return "Neutral"
        elif rsi >= 30:
            return "Weak"
        else:
            return "Oversold ⚠️"
    
    def _generate_ascii_chart(self, current_price: float, change_pct: float) -> str:
        """Generate simple ASCII price chart"""
        width = 40
        if change_pct > 0:
            bar_width = int((change_pct / 10.0) * width)
            bar_width = min(bar_width, width)
            bar = "█" * bar_width
            return f"{bar}  ${current_price:,.2f} (+{change_pct:.2f}%)"
        elif change_pct < 0:
            bar_width = int((abs(change_pct) / 10.0) * width)
            bar_width = min(bar_width, width)
            bar = "█" * bar_width
            return f"${current_price:,.2f} ({change_pct:.2f}%)  {bar}"
        else:
            return f"${current_price:,.2f} (0.00%)"


def main():
    parser = argparse.ArgumentParser(
        description="Format analysis results into human-readable reports",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  python format_output.py < analysis.json
  python format_output.py --format text < analysis.json
  python fetch_data.py --pair BTC/USD | python apply_rules.py | python format_output.py
  python format_output.py --format markdown --include-charts < analysis.json
        """
    )
    
    parser.add_argument(
        "--format",
        type=str,
        default="markdown",
        choices=["markdown", "text", "json"],
        help="Output format (default: markdown)"
    )
    parser.add_argument(
        "--include-charts",
        action="store_true",
        help="Include ASCII charts in markdown output"
    )
    
    args = parser.parse_args()
    
    # Read JSON from stdin
    try:
        input_data = json.load(sys.stdin)
    except json.JSONDecodeError as e:
        print(f"ERROR: Invalid JSON input: {e}", file=sys.stderr)
        return 1
    
    # Format output
    formatter = ReportFormatter()
    
    if args.format == "markdown":
        output = formatter.format_markdown(input_data, args.include_charts)
    elif args.format == "text":
        output = formatter.format_text(input_data)
    else:  # json
        output = formatter.format_json(input_data)
    
    print(output)
    return 0


if __name__ == "__main__":
    sys.exit(main())
